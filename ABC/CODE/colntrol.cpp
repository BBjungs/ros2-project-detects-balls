#include <Arduino.h>

// üîß PWM ‡∏Ç‡∏≠‡∏á‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏•‡πâ‡∏≠
#define EN_LF 4
#define EN_RF 5
#define EN_LB 3
#define EN_RB 2

// üîß ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå (IN1, IN2)
#define DIR1_LF 18
#define DIR2_LF 19
#define DIR1_RF 22
#define DIR2_RF 23
#define DIR1_LB 16
#define DIR2_LB 17
#define DIR1_RB 14
#define DIR2_RB 15

// üîß ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
const int SPEED_FORWARD      = 100;
const int SPEED_BACKWARD     = 100;
const int SPEED_SLIDE_LEFT   = 100;
const int SPEED_SLIDE_RIGHT  = 50;
const int SPEED_TURN_LEFT    = 100;
const int SPEED_TURN_RIGHT   = 100;
const int SPEED_BRAKE_SOFT   = 100;

// üîß factor ‡πÅ‡∏¢‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á

// ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤
float factor_forward_lf = 1.00;
float factor_forward_rf = 1.20;
float factor_forward_lb = 1.00;
float factor_forward_rb = 1.00;

// ‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
float factor_backward_lf = 1.00;
float factor_backward_rf = 1.00;
float factor_backward_lb = 1.00;
float factor_backward_rb = 1.00;

// ‡∏™‡πÑ‡∏•‡∏î‡πå‡∏ã‡πâ‡∏≤‡∏¢
float factor_slide_left_lf = 1.00;
float factor_slide_left_rf = 1.00;
float factor_slide_left_lb = 1.00;
float factor_slide_left_rb = 1.00;

// ‡∏™‡πÑ‡∏•‡∏î‡πå‡∏Ç‡∏ß‡∏≤
float factor_slide_right_lf = 2.00;
float factor_slide_right_rf = 1.00;
float factor_slide_right_lb = 1.00;
float factor_slide_right_rb = 1.00;

// ‡∏´‡∏°‡∏∏‡∏ô
float factor_turn_lf = 1.10;
float factor_turn_rf = 1.00;
float factor_turn_lb = 1.00;
float factor_turn_rb = 1.00;

// üõ† ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏•‡πâ‡∏≠‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
void controlWheel(int en, int in1, int in2, int speed, bool forward) {
  digitalWrite(in1, forward ? HIGH : LOW);
  digitalWrite(in2, forward ? LOW : HIGH);
  analogWrite(en, constrain(abs(speed), 0, 255));
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
void moveForward() {
  controlWheel(EN_LF, DIR1_LF, DIR2_LF, SPEED_FORWARD * factor_forward_lf, true);
  controlWheel(EN_RF, DIR1_RF, DIR2_RF, SPEED_FORWARD * factor_forward_rf, true);
  controlWheel(EN_LB, DIR1_LB, DIR2_LB, SPEED_FORWARD * factor_forward_lb, true);
  controlWheel(EN_RB, DIR1_RB, DIR2_RB, SPEED_FORWARD * factor_forward_rb, true);
}

void moveBackward() {
  controlWheel(EN_LF, DIR1_LF, DIR2_LF, SPEED_BACKWARD * factor_backward_lf, false);
  controlWheel(EN_RF, DIR1_RF, DIR2_RF, SPEED_BACKWARD * factor_backward_rf, false);
  controlWheel(EN_LB, DIR1_LB, DIR2_LB, SPEED_BACKWARD * factor_backward_lb, false);
  controlWheel(EN_RB, DIR1_RB, DIR2_RB, SPEED_BACKWARD * factor_backward_rb, false);
}

void slideLeft() {
  controlWheel(EN_LF, DIR1_LF, DIR2_LF, SPEED_SLIDE_LEFT * factor_slide_left_lf, false);
  controlWheel(EN_RF, DIR1_RF, DIR2_RF, SPEED_SLIDE_LEFT * factor_slide_left_rf, true);
  controlWheel(EN_LB, DIR1_LB, DIR2_LB, SPEED_SLIDE_LEFT * factor_slide_left_lb, true);
  controlWheel(EN_RB, DIR1_RB, DIR2_RB, SPEED_SLIDE_LEFT * factor_slide_left_rb, false);
}

void slideRight() {
  controlWheel(EN_LF, DIR1_LF, DIR2_LF, SPEED_SLIDE_RIGHT * factor_slide_right_lf, true);
  controlWheel(EN_RF, DIR1_RF, DIR2_RF, SPEED_SLIDE_RIGHT * factor_slide_right_rf, false);
  controlWheel(EN_LB, DIR1_LB, DIR2_LB, SPEED_SLIDE_RIGHT * factor_slide_right_lb, false);
  controlWheel(EN_RB, DIR1_RB, DIR2_RB, SPEED_SLIDE_RIGHT * factor_slide_right_rb, true);
}

void turnLeft() {
  controlWheel(EN_LF, DIR1_LF, DIR2_LF, SPEED_TURN_LEFT * factor_turn_lf, false);
  controlWheel(EN_RF, DIR1_RF, DIR2_RF, SPEED_TURN_LEFT * factor_turn_rf, true);
  controlWheel(EN_LB, DIR1_LB, DIR2_LB, SPEED_TURN_LEFT * factor_turn_lb, false);
  controlWheel(EN_RB, DIR1_RB, DIR2_RB, SPEED_TURN_LEFT * factor_turn_rb, true);
}

void turnRight() {
  controlWheel(EN_LF, DIR1_LF, DIR2_LF, SPEED_TURN_RIGHT * factor_turn_lf, true);
  controlWheel(EN_RF, DIR1_RF, DIR2_RF, SPEED_TURN_RIGHT * factor_turn_rf, false);
  controlWheel(EN_LB, DIR1_LB, DIR2_LB, SPEED_TURN_RIGHT * factor_turn_lb, true);
  controlWheel(EN_RB, DIR1_RB, DIR2_RB, SPEED_TURN_RIGHT * factor_turn_rb, false);
}

void stopAllWheels() {
  controlWheel(EN_LF, DIR1_LF, DIR2_LF, 0, true);
  controlWheel(EN_RF, DIR1_RF, DIR2_RF, 0, true);
  controlWheel(EN_LB, DIR1_LB, DIR2_LB, 0, true);
  controlWheel(EN_RB, DIR1_RB, DIR2_RB, 0, true);
}

// üõë ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ö‡∏£‡∏Å‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏•
void softBrakeForward(int ms = 100) {
  moveBackward();
  delay(ms);
  stopAllWheels();
}

void softBrakeSlideRight(int ms = 100) {
  slideLeft();
  delay(ms);
  stopAllWheels();
}

// ‚úÖ setup
void setup() {
  pinMode(EN_LF, OUTPUT); pinMode(DIR1_LF, OUTPUT); pinMode(DIR2_LF, OUTPUT);
  pinMode(EN_RF, OUTPUT); pinMode(DIR1_RF, OUTPUT); pinMode(DIR2_RF, OUTPUT);
  pinMode(EN_LB, OUTPUT); pinMode(DIR1_LB, OUTPUT); pinMode(DIR2_LB, OUTPUT);
  pinMode(EN_RB, OUTPUT); pinMode(DIR1_RB, OUTPUT); pinMode(DIR2_RB, OUTPUT);

  Serial.begin(115200);
  Serial.println("üöó ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏≠‡πÇ‡∏≠‡∏°‡∏ô‡∏¥ ‡∏û‡∏£‡πâ‡∏≠‡∏° factor ‡πÅ‡∏¢‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á");
  stopAllWheels();
}

// üîÅ loop
void loop() {
  if (Serial.available()) {
    String cmd = Serial.readStringUntil('\n');
    cmd.trim(); cmd.toUpperCase();

    Serial.print("üì• ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: "); Serial.println(cmd);

    if (cmd == "F") moveForward();
    else if (cmd == "B") moveBackward();
    else if (cmd == "L") slideLeft();
    else if (cmd == "R") slideRight();
    else if (cmd == "TL") turnLeft();
    else if (cmd == "TR") turnRight();
    else if (cmd == "S") stopAllWheels();

    // üîÑ ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏û‡∏¥‡πÄ‡∏®‡∏©
    else if (cmd == "1") {
      Serial.println("‚û° ‡∏™‡πÑ‡∏•‡∏î‡πå‡∏Ç‡∏ß‡∏≤ 1 ‡∏ß‡∏¥...");
      slideRight();
      delay(1100);
      Serial.println("‚èπ ‡πÄ‡∏ö‡∏£‡∏Å‡∏™‡πÑ‡∏•‡∏î‡πå‡∏Ç‡∏ß‡∏≤...");
      softBrakeSlideRight(100);    

      Serial.println("‚ñ∂ ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤ 2 ‡∏ß‡∏¥...");
      moveForward();
      delay(2700);
      Serial.println("‚èπ ‡πÄ‡∏ö‡∏£‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤...");
      softBrakeForward(100);

      Serial.println("‚è≥ ‡∏´‡∏ô‡πà‡∏ß‡∏á 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...");
      delay(5000);

      Serial.println("üîÑ ‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á 2 ‡∏ß‡∏¥...");
      moveBackward();
      delay(1000);
      softBrakeForward(100);  // ‡πÉ‡∏ä‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡πâ‡∏≤ ‡πÜ ‡∏´‡∏¢‡∏∏‡∏î‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á


      Serial.println("‚¨Ö ‡∏™‡πÑ‡∏•‡∏î‡πå‡∏ã‡πâ‡∏≤‡∏¢ 2 ‡∏ß‡∏¥...");
      slideLeft();
      delay(2000);
      Serial.println("‚èπ ‡πÄ‡∏ö‡∏£‡∏Å‡∏™‡πÑ‡∏•‡∏î‡πå‡∏ã‡πâ‡∏≤‡∏¢...");
      slideRight();  // ‡πÉ‡∏ä‡πâ slideRight() ‡πÄ‡∏ö‡∏£‡∏Å‡πÅ‡∏ö‡∏ö‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏•
      delay(100);

      
      Serial.println("‚û° ‡∏™‡πÑ‡∏•‡∏î‡πå‡∏Ç‡∏ß‡∏≤ 2 ‡∏ß‡∏¥...");
      slideRight();
      delay(8500);
      softBrakeSlideRight(100);


      //stopAllWheels();

      Serial.println("‚úÖ ‡∏à‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");
    }
    else {
      Serial.println("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    }
  }
}
